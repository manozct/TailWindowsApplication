//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CourierBackOfficeManagement.Country {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CountryWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CountryWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CountryNameAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryNameUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryNameGetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryNameGetByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryNameDeleteByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCountryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CountryWebService() {
            this.Url = global::CourierBackOfficeManagement.Properties.Settings.Default.CourierBackOfficeManagement_Country_CountryWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CountryNameAddCompletedEventHandler CountryNameAddCompleted;
        
        /// <remarks/>
        public event CountryNameUpdateCompletedEventHandler CountryNameUpdateCompleted;
        
        /// <remarks/>
        public event CountryNameGetAllCompletedEventHandler CountryNameGetAllCompleted;
        
        /// <remarks/>
        public event CountryNameGetByIDCompletedEventHandler CountryNameGetByIDCompleted;
        
        /// <remarks/>
        public event CountryNameDeleteByIDCompletedEventHandler CountryNameDeleteByIDCompleted;
        
        /// <remarks/>
        public event GetPageDataCompletedEventHandler GetPageDataCompleted;
        
        /// <remarks/>
        public event SearchCountryCompletedEventHandler SearchCountryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryNameAdd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CountryNameAdd(CountryInfo objInfo, string token) {
            object[] results = this.Invoke("CountryNameAdd", new object[] {
                        objInfo,
                        token});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CountryNameAddAsync(CountryInfo objInfo, string token) {
            this.CountryNameAddAsync(objInfo, token, null);
        }
        
        /// <remarks/>
        public void CountryNameAddAsync(CountryInfo objInfo, string token, object userState) {
            if ((this.CountryNameAddOperationCompleted == null)) {
                this.CountryNameAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryNameAddOperationCompleted);
            }
            this.InvokeAsync("CountryNameAdd", new object[] {
                        objInfo,
                        token}, this.CountryNameAddOperationCompleted, userState);
        }
        
        private void OnCountryNameAddOperationCompleted(object arg) {
            if ((this.CountryNameAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryNameAddCompleted(this, new CountryNameAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryNameUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CountryNameUpdate(CountryInfo objInfo, string token) {
            object[] results = this.Invoke("CountryNameUpdate", new object[] {
                        objInfo,
                        token});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CountryNameUpdateAsync(CountryInfo objInfo, string token) {
            this.CountryNameUpdateAsync(objInfo, token, null);
        }
        
        /// <remarks/>
        public void CountryNameUpdateAsync(CountryInfo objInfo, string token, object userState) {
            if ((this.CountryNameUpdateOperationCompleted == null)) {
                this.CountryNameUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryNameUpdateOperationCompleted);
            }
            this.InvokeAsync("CountryNameUpdate", new object[] {
                        objInfo,
                        token}, this.CountryNameUpdateOperationCompleted, userState);
        }
        
        private void OnCountryNameUpdateOperationCompleted(object arg) {
            if ((this.CountryNameUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryNameUpdateCompleted(this, new CountryNameUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryNameGetAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountryInfo[] CountryNameGetAll(string token) {
            object[] results = this.Invoke("CountryNameGetAll", new object[] {
                        token});
            return ((CountryInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void CountryNameGetAllAsync(string token) {
            this.CountryNameGetAllAsync(token, null);
        }
        
        /// <remarks/>
        public void CountryNameGetAllAsync(string token, object userState) {
            if ((this.CountryNameGetAllOperationCompleted == null)) {
                this.CountryNameGetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryNameGetAllOperationCompleted);
            }
            this.InvokeAsync("CountryNameGetAll", new object[] {
                        token}, this.CountryNameGetAllOperationCompleted, userState);
        }
        
        private void OnCountryNameGetAllOperationCompleted(object arg) {
            if ((this.CountryNameGetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryNameGetAllCompleted(this, new CountryNameGetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryNameGetByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountryInfo CountryNameGetByID(int CountryID, string token) {
            object[] results = this.Invoke("CountryNameGetByID", new object[] {
                        CountryID,
                        token});
            return ((CountryInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CountryNameGetByIDAsync(int CountryID, string token) {
            this.CountryNameGetByIDAsync(CountryID, token, null);
        }
        
        /// <remarks/>
        public void CountryNameGetByIDAsync(int CountryID, string token, object userState) {
            if ((this.CountryNameGetByIDOperationCompleted == null)) {
                this.CountryNameGetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryNameGetByIDOperationCompleted);
            }
            this.InvokeAsync("CountryNameGetByID", new object[] {
                        CountryID,
                        token}, this.CountryNameGetByIDOperationCompleted, userState);
        }
        
        private void OnCountryNameGetByIDOperationCompleted(object arg) {
            if ((this.CountryNameGetByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryNameGetByIDCompleted(this, new CountryNameGetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryNameDeleteByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CountryNameDeleteByID(int CountryID, string DeletedBy, string token) {
            this.Invoke("CountryNameDeleteByID", new object[] {
                        CountryID,
                        DeletedBy,
                        token});
        }
        
        /// <remarks/>
        public void CountryNameDeleteByIDAsync(int CountryID, string DeletedBy, string token) {
            this.CountryNameDeleteByIDAsync(CountryID, DeletedBy, token, null);
        }
        
        /// <remarks/>
        public void CountryNameDeleteByIDAsync(int CountryID, string DeletedBy, string token, object userState) {
            if ((this.CountryNameDeleteByIDOperationCompleted == null)) {
                this.CountryNameDeleteByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryNameDeleteByIDOperationCompleted);
            }
            this.InvokeAsync("CountryNameDeleteByID", new object[] {
                        CountryID,
                        DeletedBy,
                        token}, this.CountryNameDeleteByIDOperationCompleted, userState);
        }
        
        private void OnCountryNameDeleteByIDOperationCompleted(object arg) {
            if ((this.CountryNameDeleteByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryNameDeleteByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPageData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPageData(int current, int pagesize, string token) {
            object[] results = this.Invoke("GetPageData", new object[] {
                        current,
                        pagesize,
                        token});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPageDataAsync(int current, int pagesize, string token) {
            this.GetPageDataAsync(current, pagesize, token, null);
        }
        
        /// <remarks/>
        public void GetPageDataAsync(int current, int pagesize, string token, object userState) {
            if ((this.GetPageDataOperationCompleted == null)) {
                this.GetPageDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageDataOperationCompleted);
            }
            this.InvokeAsync("GetPageData", new object[] {
                        current,
                        pagesize,
                        token}, this.GetPageDataOperationCompleted, userState);
        }
        
        private void OnGetPageDataOperationCompleted(object arg) {
            if ((this.GetPageDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageDataCompleted(this, new GetPageDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchCountry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SearchCountry(string searchText, string token) {
            object[] results = this.Invoke("SearchCountry", new object[] {
                        searchText,
                        token});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCountryAsync(string searchText, string token) {
            this.SearchCountryAsync(searchText, token, null);
        }
        
        /// <remarks/>
        public void SearchCountryAsync(string searchText, string token, object userState) {
            if ((this.SearchCountryOperationCompleted == null)) {
                this.SearchCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCountryOperationCompleted);
            }
            this.InvokeAsync("SearchCountry", new object[] {
                        searchText,
                        token}, this.SearchCountryOperationCompleted, userState);
        }
        
        private void OnSearchCountryOperationCompleted(object arg) {
            if ((this.SearchCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCountryCompleted(this, new SearchCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.81.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CountryInfo {
        
        private int countryIDField;
        
        private string countryNameField;
        
        private string addedByField;
        
        private string editedByField;
        
        private string deletedByField;
        
        private System.DateTime addedDateField;
        
        private System.DateTime editedDateField;
        
        private System.DateTime deletedDateField;
        
        private bool isModifiedField;
        
        private bool isDeletedField;
        
        /// <remarks/>
        public int CountryID {
            get {
                return this.countryIDField;
            }
            set {
                this.countryIDField = value;
            }
        }
        
        /// <remarks/>
        public string CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
        
        /// <remarks/>
        public string AddedBy {
            get {
                return this.addedByField;
            }
            set {
                this.addedByField = value;
            }
        }
        
        /// <remarks/>
        public string EditedBy {
            get {
                return this.editedByField;
            }
            set {
                this.editedByField = value;
            }
        }
        
        /// <remarks/>
        public string DeletedBy {
            get {
                return this.deletedByField;
            }
            set {
                this.deletedByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AddedDate {
            get {
                return this.addedDateField;
            }
            set {
                this.addedDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EditedDate {
            get {
                return this.editedDateField;
            }
            set {
                this.editedDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DeletedDate {
            get {
                return this.deletedDateField;
            }
            set {
                this.deletedDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsModified {
            get {
                return this.isModifiedField;
            }
            set {
                this.isModifiedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CountryNameAddCompletedEventHandler(object sender, CountryNameAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryNameAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountryNameAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CountryNameUpdateCompletedEventHandler(object sender, CountryNameUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryNameUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountryNameUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CountryNameGetAllCompletedEventHandler(object sender, CountryNameGetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryNameGetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountryNameGetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountryInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountryInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CountryNameGetByIDCompletedEventHandler(object sender, CountryNameGetByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryNameGetByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountryNameGetByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountryInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountryInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void CountryNameDeleteByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetPageDataCompletedEventHandler(object sender, GetPageDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void SearchCountryCompletedEventHandler(object sender, SearchCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591